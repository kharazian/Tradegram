// <auto-generated />
using System;
using Hitasp.HitCommerce.Catalog.DemoApp;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Hitasp.HitCommerce.Catalog.DemoApp.Migrations
{
    [DbContext(typeof(DemoAppDbContext))]
    [Migration("20190205152459_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Hitasp.HitCommerce.Catalog.Attributes.Entities.PredefinedAttributeValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Cost")
                        .HasColumnName("Cost");

                    b.Property<int>("DisplayOrder")
                        .HasColumnName("DisplayOrder");

                    b.Property<bool>("IsPreSelected")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsPreSelected")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasMaxLength(64);

                    b.Property<decimal>("PriceAdjustment")
                        .HasColumnName("PriceAdjustment");

                    b.Property<bool>("PriceAdjustmentUsePercentage")
                        .HasColumnName("PriceAdjustmentUsePercentage");

                    b.Property<Guid>("ProductAttributeId")
                        .HasColumnName("ProductAttributeId");

                    b.Property<Guid?>("ProductAttributeId1");

                    b.Property<decimal>("WeightAdjustment")
                        .HasColumnName("WeightAdjustment");

                    b.HasKey("Id");

                    b.HasIndex("ProductAttributeId");

                    b.HasIndex("ProductAttributeId1");

                    b.ToTable("CatalogPredefinedAttributeValues");
                });

            modelBuilder.Entity("Hitasp.HitCommerce.Catalog.Attributes.Entities.ProductAttribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("Description")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("CatalogProductAttributes");
                });

            modelBuilder.Entity("Hitasp.HitCommerce.Catalog.BackInStockSubscriptions.Entities.BackInStockSubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId");

                    b.Property<Guid>("CustomerId")
                        .HasColumnName("CustomerId");

                    b.Property<Guid>("ProductId")
                        .HasColumnName("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("CatalogBackInStockSubscriptions");
                });

            modelBuilder.Entity("Hitasp.HitCommerce.Catalog.Categories.Aggregates.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AllowCustomersToSelectPageSize")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AllowCustomersToSelectPageSize")
                        .HasDefaultValue(true);

                    b.Property<Guid>("CategoryTemplateId")
                        .HasColumnName("CategoryTemplateId");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("Description")
                        .HasColumnName("Description")
                        .HasMaxLength(450);

                    b.Property<int>("DisplayOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DisplayOrder")
                        .HasDefaultValue(0);

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IncludeInTopMenu")
                        .HasColumnName("IncludeInTopMenu");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("MetaDescription")
                        .HasColumnName("MetaDescription")
                        .HasMaxLength(450);

                    b.Property<string>("MetaKeywords")
                        .HasColumnName("MetaKeywords")
                        .HasMaxLength(450);

                    b.Property<string>("MetaTitle")
                        .HasColumnName("MetaTitle")
                        .HasMaxLength(150);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasMaxLength(64);

                    b.Property<int>("PageSize")
                        .HasColumnName("PageSize");

                    b.Property<string>("PageSizeOptions")
                        .HasColumnName("PageSizeOptions");

                    b.Property<Guid?>("ParentCategoryId")
                        .HasColumnName("ParentCategoryId");

                    b.Property<Guid?>("PictureId")
                        .HasColumnName("PictureId");

                    b.Property<string>("PriceRanges")
                        .HasColumnName("PriceRanges");

                    b.Property<bool>("Published")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Published")
                        .HasDefaultValue(false);

                    b.Property<bool>("ShowOnHomePage")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ShowOnHomePage")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("CategoryTemplateId");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("CatalogCategories");
                });

            modelBuilder.Entity("Hitasp.HitCommerce.Catalog.Categories.Mapping.CategoryDiscount", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .HasColumnName("CategoryId");

                    b.Property<Guid>("DiscountId")
                        .HasColumnName("DiscountId");

                    b.Property<Guid?>("CategoryId1");

                    b.HasKey("CategoryId", "DiscountId");

                    b.HasIndex("CategoryId1");

                    b.ToTable("CatalogCategories_CategoryDiscount");
                });

            modelBuilder.Entity("Hitasp.HitCommerce.Catalog.Manufacturers.Aggregates.Manufacturer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AllowCustomersToSelectPageSize")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AllowCustomersToSelectPageSize")
                        .HasDefaultValue(true);

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("Description")
                        .HasColumnName("Description")
                        .HasMaxLength(450);

                    b.Property<int>("DisplayOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DisplayOrder")
                        .HasDefaultValue(0);

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId");

                    b.Property<Guid>("ManufacturerTemplateId")
                        .HasColumnName("ManufacturerTemplateId");

                    b.Property<string>("MetaDescription")
                        .HasColumnName("MetaDescription")
                        .HasMaxLength(450);

                    b.Property<string>("MetaKeywords")
                        .HasColumnName("MetaKeywords")
                        .HasMaxLength(450);

                    b.Property<string>("MetaTitle")
                        .HasColumnName("MetaTitle")
                        .HasMaxLength(150);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasMaxLength(64);

                    b.Property<int>("PageSize")
                        .HasColumnName("PageSize");

                    b.Property<string>("PageSizeOptions")
                        .HasColumnName("PageSizeOptions");

                    b.Property<Guid?>("PictureId")
                        .HasColumnName("PictureId");

                    b.Property<string>("PriceRanges")
                        .HasColumnName("PriceRanges");

                    b.Property<bool>("Published")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Published")
                        .HasDefaultValue(false);

                    b.Property<bool>("ShowOnHomePage")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ShowOnHomePage")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerTemplateId");

                    b.ToTable("CatalogManufacturers");
                });

            modelBuilder.Entity("Hitasp.HitCommerce.Catalog.Manufacturers.Mapping.ManufacturerDiscount", b =>
                {
                    b.Property<Guid>("ManufacturerId")
                        .HasColumnName("ManufacturerId");

                    b.Property<Guid>("DiscountId")
                        .HasColumnName("DiscountId");

                    b.Property<Guid?>("ManufacturerId1");

                    b.HasKey("ManufacturerId", "DiscountId");

                    b.HasIndex("ManufacturerId1");

                    b.ToTable("CatalogManufacturers_ManufacturerDiscount");
                });

            modelBuilder.Entity("Hitasp.HitCommerce.Catalog.Products.Abstracts.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AvailableEndDate")
                        .HasColumnName("AvailableEndDate");

                    b.Property<DateTime?>("AvailableStartDate")
                        .HasColumnName("AvailableStartDate");

                    b.Property<bool>("BasePriceEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BasePriceEnabled")
                        .HasDefaultValue(false);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("Code")
                        .HasMaxLength(150);

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime");

                    b.Property<int>("DisplayOrder")
                        .HasColumnName("DisplayOrder");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties");

                    b.Property<string>("FullDescription")
                        .HasColumnName("FullDescription")
                        .HasMaxLength(450);

                    b.Property<string>("Gtin")
                        .HasColumnName("Gtin")
                        .HasMaxLength(150);

                    b.Property<bool>("HasDiscountsApplied");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("ManufacturerPartNumber")
                        .HasColumnName("ManufacturerPartNumber")
                        .HasMaxLength(150);

                    b.Property<bool>("MarkAsNew")
                        .HasColumnName("MarkAsNew");

                    b.Property<DateTime?>("MarkAsNewEndDate")
                        .HasColumnName("MarkAsNewEndDate");

                    b.Property<DateTime?>("MarkAsNewStartDate")
                        .HasColumnName("MarkAsNewStartDate");

                    b.Property<string>("MetaDescription")
                        .HasColumnName("MetaDescription")
                        .HasMaxLength(450);

                    b.Property<string>("MetaKeywords")
                        .HasColumnName("MetaKeywords")
                        .HasMaxLength(450);

                    b.Property<string>("MetaTitle")
                        .HasColumnName("MetaTitle")
                        .HasMaxLength(150);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasMaxLength(64);

                    b.Property<Guid>("ProductTemplateId")
                        .HasColumnName("ProductTemplateId");

                    b.Property<string>("ProductType")
                        .IsRequired()
                        .HasColumnName("ProductType")
                        .HasMaxLength(20);

                    b.Property<bool>("Published")
                        .HasColumnName("Published");

                    b.Property<double>("RatingAverage")
                        .HasColumnName("RatingAverage");

                    b.Property<int>("RatingCount")
                        .HasColumnName("RatingCount");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnName("ShortDescription")
                        .HasMaxLength(150);

                    b.Property<bool>("ShowOnHomePage")
                        .HasColumnName("ShowOnHomePage");

                    b.Property<Guid?>("VendorId")
                        .HasColumnName("VendorId");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("ProductTemplateId");

                    b.HasIndex("ProductType");

                    b.ToTable("CatalogProducts");

                    b.HasDiscriminator<string>("ProductType").HasValue("Product");
                });

            modelBuilder.Entity("Hitasp.HitCommerce.Catalog.Products.Mapping.CrossSellProduct", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnName("ProductId");

                    b.Property<Guid>("CrossSellProductId")
                        .HasColumnName("CrossSellProductId");

                    b.HasKey("ProductId", "CrossSellProductId");

                    b.ToTable("CatalogProducts_CrossSellProduct");
                });

            modelBuilder.Entity("Hitasp.HitCommerce.Catalog.Products.Mapping.ProductAttributeCombination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AllowOutOfStockOrders")
                        .HasColumnName("AllowOutOfStockOrders");

                    b.Property<string>("AttributesXml")
                        .HasColumnName("AttributesXml");

                    b.Property<string>("Code")
                        .HasColumnName("Code");

                    b.Property<string>("Gtin")
                        .HasColumnName("Gtin");

                    b.Property<string>("ManufacturerPartNumber")
                        .HasColumnName("ManufacturerPartNumber");

                    b.Property<decimal?>("OverriddenPrice")
                        .HasColumnName("OverriddenPrice");

                    b.Property<Guid?>("PictureId")
                        .HasColumnName("PictureId");

                    b.Property<Guid>("ProductId")
                        .HasColumnName("ProductId");

                    b.Property<Guid?>("ShippableId");

                    b.Property<int>("StockQuantity")
                        .HasColumnName("StockQuantity");

                    b.HasKey("Id");

                    b.HasIndex("ShippableId");

                    b.ToTable("CatalogProducts_AttributeCombinations");
                });

            modelBuilder.Entity("Hitasp.HitCommerce.Catalog.Products.Mapping.ProductAttributeValue", b =>
                {
                    b.Property<Guid>("ProductId");

                    b.Property<Guid>("ProductAttributeId");

                    b.Property<int>("AttributeValueType")
                        .HasColumnName("AttributeValueType");

                    b.Property<int>("AttributeValueTypeId");

                    b.Property<string>("ColorSquaresRgb")
                        .HasColumnName("ColorSquaresRgb");

                    b.Property<decimal>("Cost")
                        .HasColumnName("Cost");

                    b.Property<bool>("CustomerEntersQty")
                        .HasColumnName("CustomerEntersQty");

                    b.Property<int>("DisplayOrder")
                        .HasColumnName("DisplayOrder");

                    b.Property<Guid?>("ImageSquaresPictureId")
                        .HasColumnName("ImageSquaresPictureId");

                    b.Property<bool>("IsPreSelected")
                        .HasColumnName("IsPreSelected");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name");

                    b.Property<Guid?>("PictureId")
                        .HasColumnName("PictureId");

                    b.Property<decimal>("PriceAdjustment")
                        .HasColumnName("PriceAdjustment");

                    b.Property<bool>("PriceAdjustmentUsePercentage")
                        .HasColumnName("PriceAdjustmentUsePercentage");

                    b.Property<Guid>("ProductProductAttributeProductAttributeId");

                    b.Property<Guid>("ProductProductAttributeProductId");

                    b.Property<int>("Quantity")
                        .HasColumnName("Quantity");

                    b.Property<decimal>("WeightAdjustment")
                        .HasColumnName("WeightAdjustment");

                    b.HasKey("ProductId", "ProductAttributeId");

                    b.HasIndex("ProductProductAttributeProductId", "ProductProductAttributeProductAttributeId");

                    b.ToTable("CatalogProducts_AttributeValues");
                });

            modelBuilder.Entity("Hitasp.HitCommerce.Catalog.Products.Mapping.ProductCategory", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnName("ProductId");

                    b.Property<Guid>("CategoryId")
                        .HasColumnName("CategoryId");

                    b.Property<int>("DisplayOrder")
                        .HasColumnName("DisplayOrder");

                    b.Property<bool>("IsFeaturedProduct")
                        .HasColumnName("IsFeaturedProduct");

                    b.HasKey("ProductId", "CategoryId");

                    b.ToTable("CatalogProducts_ProductCategory");
                });

            modelBuilder.Entity("Hitasp.HitCommerce.Catalog.Products.Mapping.ProductDiscount", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnName("ProductId");

                    b.Property<Guid>("DiscountId")
                        .HasColumnName("DiscountId");

                    b.HasKey("ProductId", "DiscountId");

                    b.ToTable("CatalogProducts_ProductDiscount");
                });

            modelBuilder.Entity("Hitasp.HitCommerce.Catalog.Products.Mapping.ProductManufacturer", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnName("ProductId");

                    b.Property<Guid>("ManufacturerId")
                        .HasColumnName("ManufacturerId");

                    b.Property<int>("DisplayOrder")
                        .HasColumnName("DisplayOrder");

                    b.Property<bool>("IsFeaturedProduct")
                        .HasColumnName("IsFeaturedProduct");

                    b.HasKey("ProductId", "ManufacturerId");

                    b.ToTable("CatalogProducts_ProductManufacturer");
                });

            modelBuilder.Entity("Hitasp.HitCommerce.Catalog.Products.Mapping.ProductPicture", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnName("ProductId");

                    b.Property<Guid>("PictureId")
                        .HasColumnName("PictureId");

                    b.Property<int>("DisplayOrder")
                        .HasColumnName("DisplayOrder");

                    b.HasKey("ProductId", "PictureId");

                    b.ToTable("CatalogProducts_ProductPicture");
                });

            modelBuilder.Entity("Hitasp.HitCommerce.Catalog.Products.Mapping.ProductProductAttribute", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnName("ProductId");

                    b.Property<Guid>("ProductAttributeId")
                        .HasColumnName("ProductAttributeId");

                    b.Property<int>("AttributeControlType")
                        .HasColumnName("AttributeControlType");

                    b.Property<string>("ConditionAttributeXml")
                        .HasColumnName("ConditionAttributeXml");

                    b.Property<string>("DefaultValue")
                        .HasColumnName("DefaultValue");

                    b.Property<int>("DisplayOrder")
                        .HasColumnName("DisplayOrder");

                    b.Property<bool>("IsRequired")
                        .HasColumnName("IsRequired");

                    b.Property<Guid?>("ProductId1");

                    b.Property<string>("TextPrompt")
                        .HasColumnName("TextPrompt");

                    b.Property<string>("ValidationFileAllowedExtensions")
                        .HasColumnName("ValidationFileAllowedExtensions");

                    b.Property<int?>("ValidationFileMaximumSize")
                        .HasColumnName("ValidationFileMaximumSize");

                    b.Property<int?>("ValidationMaxLength")
                        .HasColumnName("ValidationMaxLength");

                    b.Property<int?>("ValidationMinLength")
                        .HasColumnName("ValidationMinLength");

                    b.HasKey("ProductId", "ProductAttributeId");

                    b.HasIndex("ProductAttributeId");

                    b.HasIndex("ProductId1");

                    b.ToTable("CatalogProducts_Attributes");
                });

            modelBuilder.Entity("Hitasp.HitCommerce.Catalog.Products.Mapping.ProductProductTag", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnName("ProductId");

                    b.Property<Guid>("ProductTagId")
                        .HasColumnName("ProductTagId");

                    b.HasKey("ProductId", "ProductTagId");

                    b.ToTable("CatalogProducts_ProductTag");
                });

            modelBuilder.Entity("Hitasp.HitCommerce.Catalog.Products.Mapping.ProductSpecificationAttribute", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnName("ProductId");

                    b.Property<Guid>("SpecificationAttributeOptionId")
                        .HasColumnName("SpecificationAttributeOptionId");

                    b.Property<bool>("AllowFiltering")
                        .HasColumnName("AllowFiltering");

                    b.Property<int>("AttributeType")
                        .HasColumnName("AttributeType");

                    b.Property<string>("CustomValue")
                        .HasColumnName("CustomValue");

                    b.Property<int>("DisplayOrder")
                        .HasColumnName("DisplayOrder");

                    b.Property<bool>("ShowOnProductPage")
                        .HasColumnName("ShowOnProductPage");

                    b.HasKey("ProductId", "SpecificationAttributeOptionId");

                    b.ToTable("CatalogProducts_ProductSpecificationAttribute");
                });

            modelBuilder.Entity("Hitasp.HitCommerce.Catalog.Products.Mapping.ProductWarehouseInventory", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnName("ProductId");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnName("WarehouseId");

                    b.Property<int>("ReservedQuantity")
                        .HasColumnName("ReservedQuantity");

                    b.Property<Guid?>("ShippableId");

                    b.Property<int>("StockQuantity")
                        .HasColumnName("StockQuantity");

                    b.HasKey("ProductId", "WarehouseId");

                    b.HasIndex("ShippableId");

                    b.ToTable("CatalogProducts_ProductWarehouseInventory");
                });

            modelBuilder.Entity("Hitasp.HitCommerce.Catalog.Products.Mapping.RelatedProduct", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnName("ProductId");

                    b.Property<Guid>("RelatedProductId")
                        .HasColumnName("RelatedProductId");

                    b.HasKey("ProductId", "RelatedProductId");

                    b.ToTable("CatalogProducts_RelatedProduct");
                });

            modelBuilder.Entity("Hitasp.HitCommerce.Catalog.Products.Mapping.RequiredProduct", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnName("ProductId");

                    b.Property<Guid>("RequiredProductId")
                        .HasColumnName("RequiredProductId");

                    b.Property<bool>("AutomaticallyAddRequiredProducts");

                    b.HasKey("ProductId", "RequiredProductId");

                    b.ToTable("CatalogProducts_RequiredProduct");
                });

            modelBuilder.Entity("Hitasp.HitCommerce.Catalog.Products.Mapping.StockQuantityHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CombinationId")
                        .HasColumnName("CombinationId");

                    b.Property<DateTime>("CreationTime");

                    b.Property<Guid?>("CreatorId");

                    b.Property<string>("Message")
                        .HasColumnName("Message");

                    b.Property<Guid>("ProductId")
                        .HasColumnName("ProductId");

                    b.Property<int>("QuantityAdjustment")
                        .HasColumnName("QuantityAdjustment");

                    b.Property<int>("StockQuantity")
                        .HasColumnName("StockQuantity");

                    b.Property<Guid?>("WarehouseId")
                        .HasColumnName("WarehouseId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("CatalogProducts_StockQuantityHistories");
                });

            modelBuilder.Entity("Hitasp.HitCommerce.Catalog.SpecificationAttributes.Entities.SpecificationAttribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DisplayOrder")
                        .HasColumnName("DisplayOrder");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("CatalogSpecificationAttributes");
                });

            modelBuilder.Entity("Hitasp.HitCommerce.Catalog.SpecificationAttributes.Entities.SpecificationAttributeOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ColorSquaresRgb")
                        .HasColumnName("ColorSquaresRgb")
                        .HasMaxLength(128);

                    b.Property<int>("DisplayOrder")
                        .HasColumnName("DisplayOrder");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasMaxLength(64);

                    b.Property<Guid>("SpecificationAttributeId")
                        .HasColumnName("SpecificationAttributeId");

                    b.Property<Guid?>("SpecificationAttributeId1");

                    b.HasKey("Id");

                    b.HasIndex("SpecificationAttributeId");

                    b.HasIndex("SpecificationAttributeId1");

                    b.ToTable("CatalogSpecificationAttributeOptions");
                });

            modelBuilder.Entity("Hitasp.HitCommerce.Catalog.Tagging.Aggregates.ProductTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Description")
                        .HasColumnName("Description");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name");

                    b.Property<int>("UsageCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UsageCount")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("CatalogProductTags");
                });

            modelBuilder.Entity("Hitasp.HitCommerce.Catalog.Templates.Aggregates.Template", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime");

                    b.Property<Guid?>("CreatorId");

                    b.Property<Guid?>("DeleterId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int>("DisplayOrder")
                        .HasColumnName("DisplayOrder");

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<Guid?>("LastModifierId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name");

                    b.Property<string>("ViewPath")
                        .HasColumnName("ViewPath");

                    b.HasKey("Id");

                    b.ToTable("CatalogViewTemplates");
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityClaimType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnName("ConcurrencyStamp")
                        .HasMaxLength(256);

                    b.Property<string>("Description")
                        .HasMaxLength(256);

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsStatic");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("Regex")
                        .HasMaxLength(512);

                    b.Property<string>("RegexDescription")
                        .HasMaxLength(128);

                    b.Property<bool>("Required");

                    b.Property<int>("ValueType");

                    b.HasKey("Id");

                    b.ToTable("AbpClaimTypes");
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnName("ConcurrencyStamp")
                        .HasMaxLength(256);

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsDefault")
                        .HasColumnName("IsDefault");

                    b.Property<bool>("IsPublic")
                        .HasColumnName("IsPublic");

                    b.Property<bool>("IsStatic")
                        .HasColumnName("IsStatic");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<Guid?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName");

                    b.ToTable("AbpRoles");
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityRoleClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(1024);

                    b.Property<Guid>("RoleId");

                    b.Property<Guid?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AbpRoleClaims");
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AccessFailedCount")
                        .HasDefaultValue(0);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("Email")
                        .HasColumnName("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EmailConfirmed")
                        .HasDefaultValue(false);

                    b.Property<string>("ExtraProperties")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsDeleted")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnName("LastModifierId");

                    b.Property<bool>("LockoutEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LockoutEnabled")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasMaxLength(64);

                    b.Property<string>("NormalizedEmail")
                        .HasColumnName("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasColumnName("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnName("PasswordHash")
                        .HasMaxLength(256);

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("PhoneNumber")
                        .HasMaxLength(16);

                    b.Property<bool>("PhoneNumberConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PhoneNumberConfirmed")
                        .HasDefaultValue(false);

                    b.Property<string>("SecurityStamp")
                        .IsRequired()
                        .HasColumnName("SecurityStamp")
                        .HasMaxLength(256);

                    b.Property<string>("Surname")
                        .HasColumnName("Surname")
                        .HasMaxLength(64);

                    b.Property<Guid?>("TenantId")
                        .HasColumnName("TenantId");

                    b.Property<bool>("TwoFactorEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TwoFactorEnabled")
                        .HasDefaultValue(false);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnName("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("NormalizedEmail");

                    b.HasIndex("NormalizedUserName");

                    b.HasIndex("UserName");

                    b.ToTable("AbpUsers");
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(1024);

                    b.Property<Guid?>("TenantId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AbpUserClaims");
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserLogin", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(64);

                    b.Property<string>("ProviderDisplayName")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasMaxLength(196);

                    b.Property<Guid?>("TenantId");

                    b.HasKey("UserId", "LoginProvider");

                    b.HasIndex("LoginProvider", "ProviderKey");

                    b.ToTable("AbpUserLogins");
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserRole", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.Property<Guid?>("TenantId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId", "UserId");

                    b.ToTable("AbpUserRoles");
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserToken", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(64);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<Guid?>("TenantId");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AbpUserTokens");
                });

            modelBuilder.Entity("Volo.Abp.PermissionManagement.PermissionGrant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<Guid?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("Name", "ProviderName", "ProviderKey");

                    b.ToTable("AbpPermissionGrants");
                });

            modelBuilder.Entity("Volo.Abp.SettingManagement.Setting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(64);

                    b.Property<string>("ProviderName")
                        .HasMaxLength(64);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2048);

                    b.HasKey("Id");

                    b.HasIndex("Name", "ProviderName", "ProviderKey");

                    b.ToTable("AbpSettings");
                });

            modelBuilder.Entity("Hitasp.HitCommerce.Catalog.Products.Aggregates.Downloadable", b =>
                {
                    b.HasBaseType("Hitasp.HitCommerce.Catalog.Products.Abstracts.Product");

                    b.Property<int>("DownloadActivationTypeId")
                        .HasColumnName("DownloadActivationTypeId");

                    b.Property<int?>("DownloadExpirationDays")
                        .HasColumnName("DownloadExpirationDays");

                    b.Property<Guid>("DownloadId")
                        .HasColumnName("DownloadId");

                    b.Property<int>("GiftCardTypeId")
                        .HasColumnName("GiftCardTypeId");

                    b.Property<bool>("HasSampleDownload")
                        .HasColumnName("HasSampleDownload");

                    b.Property<bool>("HasUserAgreement")
                        .HasColumnName("HasUserAgreement");

                    b.Property<bool>("IsGiftCard")
                        .HasColumnName("IsGiftCard");

                    b.Property<int>("MaxNumberOfDownloads")
                        .HasColumnName("MaxNumberOfDownloads");

                    b.Property<decimal?>("OverriddenGiftCardAmount")
                        .HasColumnName("Downloadable_OverriddenGiftCardAmount");

                    b.Property<Guid?>("SampleDownloadId")
                        .HasColumnName("SampleDownloadId");

                    b.Property<bool>("UnlimitedDownloads")
                        .HasColumnName("UnlimitedDownloads");

                    b.Property<string>("UserAgreementText")
                        .HasColumnName("UserAgreementText");

                    b.HasDiscriminator().HasValue("Downloadable");
                });

            modelBuilder.Entity("Hitasp.HitCommerce.Catalog.Products.Aggregates.Servicable", b =>
                {
                    b.HasBaseType("Hitasp.HitCommerce.Catalog.Products.Abstracts.Product");

                    b.HasDiscriminator().HasValue("Service");
                });

            modelBuilder.Entity("Hitasp.HitCommerce.Catalog.Products.Aggregates.Shippable", b =>
                {
                    b.HasBaseType("Hitasp.HitCommerce.Catalog.Products.Abstracts.Product");

                    b.Property<int>("GiftCardTypeId")
                        .HasColumnName("GiftCardTypeId");

                    b.Property<bool>("IsGiftCard")
                        .HasColumnName("IsGiftCard");

                    b.Property<bool>("IsShipEnabled")
                        .HasColumnName("IsShipEnabled");

                    b.Property<decimal?>("OverriddenGiftCardAmount")
                        .HasColumnName("OverriddenGiftCardAmount");

                    b.HasDiscriminator().HasValue("Shippable");
                });

            modelBuilder.Entity("Hitasp.HitCommerce.Catalog.Attributes.Entities.PredefinedAttributeValue", b =>
                {
                    b.HasOne("Hitasp.HitCommerce.Catalog.Attributes.Entities.ProductAttribute")
                        .WithMany()
                        .HasForeignKey("ProductAttributeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Hitasp.HitCommerce.Catalog.Attributes.Entities.ProductAttribute", "ProductAttribute")
                        .WithMany()
                        .HasForeignKey("ProductAttributeId1");
                });

            modelBuilder.Entity("Hitasp.HitCommerce.Catalog.Categories.Aggregates.Category", b =>
                {
                    b.HasOne("Hitasp.HitCommerce.Catalog.Templates.Aggregates.Template")
                        .WithMany()
                        .HasForeignKey("CategoryTemplateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Hitasp.HitCommerce.Catalog.Categories.Aggregates.Category")
                        .WithMany()
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Hitasp.HitCommerce.Catalog.Categories.Mapping.CategoryDiscount", b =>
                {
                    b.HasOne("Hitasp.HitCommerce.Catalog.Categories.Aggregates.Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Hitasp.HitCommerce.Catalog.Categories.Aggregates.Category")
                        .WithMany("CategoryDiscounts")
                        .HasForeignKey("CategoryId1");
                });

            modelBuilder.Entity("Hitasp.HitCommerce.Catalog.Manufacturers.Aggregates.Manufacturer", b =>
                {
                    b.HasOne("Hitasp.HitCommerce.Catalog.Templates.Aggregates.Template")
                        .WithMany()
                        .HasForeignKey("ManufacturerTemplateId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Hitasp.HitCommerce.Catalog.Manufacturers.Mapping.ManufacturerDiscount", b =>
                {
                    b.HasOne("Hitasp.HitCommerce.Catalog.Manufacturers.Aggregates.Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Hitasp.HitCommerce.Catalog.Manufacturers.Aggregates.Manufacturer")
                        .WithMany("ManufacturerDiscounts")
                        .HasForeignKey("ManufacturerId1");
                });

            modelBuilder.Entity("Hitasp.HitCommerce.Catalog.Products.Abstracts.Product", b =>
                {
                    b.HasOne("Hitasp.HitCommerce.Catalog.Templates.Aggregates.Template")
                        .WithMany()
                        .HasForeignKey("ProductTemplateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("Hitasp.HitCommerce.Catalog.Products.Entities.ProductBasePrice", "ProductBasePrice", b1 =>
                        {
                            b1.Property<Guid>("ProductId");

                            b1.Property<decimal>("BasePriceAmount")
                                .HasColumnName("BasePriceAmount");

                            b1.Property<decimal>("BasePriceBaseAmount")
                                .HasColumnName("BasePriceBaseAmount");

                            b1.Property<int>("BasePriceBaseUnitId")
                                .HasColumnName("BasePriceBaseUnitId");

                            b1.Property<int>("BasePriceUnitId")
                                .HasColumnName("BasePriceUnitId");

                            b1.HasKey("ProductId");

                            b1.ToTable("CatalogProduct_BasePrice");

                            b1.HasOne("Hitasp.HitCommerce.Catalog.Products.Abstracts.Product")
                                .WithOne("ProductBasePrice")
                                .HasForeignKey("Hitasp.HitCommerce.Catalog.Products.Entities.ProductBasePrice", "ProductId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Hitasp.HitCommerce.Catalog.Products.Entities.ProductPricing", "Pricing", b1 =>
                        {
                            b1.Property<Guid>("ProductId");

                            b1.Property<bool>("AvailableForPreOrder")
                                .HasColumnName("AvailableForPreOrder");

                            b1.Property<bool>("CallForPrice")
                                .HasColumnName("CallForPrice");

                            b1.Property<bool>("CustomerEntersPrice")
                                .HasColumnName("CustomerEntersPrice");

                            b1.Property<bool>("DisableBuyButton")
                                .HasColumnName("DisableBuyButton");

                            b1.Property<bool>("DisableWishListButton")
                                .HasColumnName("DisableWishListButton");

                            b1.Property<bool>("IsRecurring")
                                .HasColumnName("IsRecurring");

                            b1.Property<bool>("IsRental")
                                .HasColumnName("IsRental");

                            b1.Property<bool>("IsTaxExempt")
                                .ValueGeneratedOnAdd()
                                .HasColumnName("IsTaxExempt")
                                .HasDefaultValue(true);

                            b1.Property<decimal>("MaximumCustomerEnteredPrice")
                                .HasColumnName("MaximumCustomerEnteredPrice");

                            b1.Property<decimal>("MinimumCustomerEnteredPrice")
                                .HasColumnName("MinimumCustomerEnteredPrice");

                            b1.Property<decimal>("OldPrice")
                                .ValueGeneratedOnAdd()
                                .HasColumnName("OldPrice")
                                .HasDefaultValue(0m);

                            b1.Property<DateTime?>("PreOrderAvailabilityStartDate")
                                .HasColumnName("PreOrderAvailabilityStartDate");

                            b1.Property<decimal>("Price")
                                .ValueGeneratedOnAdd()
                                .HasColumnName("Price")
                                .HasDefaultValue(0m);

                            b1.Property<decimal>("ProductCost")
                                .HasColumnName("ProductCost");

                            b1.Property<int>("RecurringCycleLength")
                                .HasColumnName("RecurringCycleLength");

                            b1.Property<int>("RecurringCyclePeriodId")
                                .HasColumnName("RecurringCyclePeriodId");

                            b1.Property<int>("RecurringTotalCycles")
                                .HasColumnName("RecurringTotalCycles");

                            b1.Property<int>("RentalPriceLength")
                                .HasColumnName("RentalPriceLength");

                            b1.Property<int>("RentalPricePeriodId")
                                .HasColumnName("RentalPricePeriodId");

                            b1.Property<Guid?>("TaxCategoryId")
                                .HasColumnName("TaxCategoryId");

                            b1.HasKey("ProductId");

                            b1.ToTable("CatalogProduct_Pricing");

                            b1.HasOne("Hitasp.HitCommerce.Catalog.Products.Abstracts.Product")
                                .WithOne("Pricing")
                                .HasForeignKey("Hitasp.HitCommerce.Catalog.Products.Entities.ProductPricing", "ProductId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Hitasp.HitCommerce.Catalog.Products.Mapping.CrossSellProduct", b =>
                {
                    b.HasOne("Hitasp.HitCommerce.Catalog.Products.Abstracts.Product")
                        .WithMany("CrossSellProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hitasp.HitCommerce.Catalog.Products.Mapping.ProductAttributeCombination", b =>
                {
                    b.HasOne("Hitasp.HitCommerce.Catalog.Products.Aggregates.Shippable")
                        .WithMany("ProductAttributeCombinations")
                        .HasForeignKey("ShippableId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hitasp.HitCommerce.Catalog.Products.Mapping.ProductAttributeValue", b =>
                {
                    b.HasOne("Hitasp.HitCommerce.Catalog.Products.Mapping.ProductProductAttribute")
                        .WithMany("ProductAttributeValues")
                        .HasForeignKey("ProductProductAttributeProductId", "ProductProductAttributeProductAttributeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hitasp.HitCommerce.Catalog.Products.Mapping.ProductCategory", b =>
                {
                    b.HasOne("Hitasp.HitCommerce.Catalog.Products.Abstracts.Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hitasp.HitCommerce.Catalog.Products.Mapping.ProductDiscount", b =>
                {
                    b.HasOne("Hitasp.HitCommerce.Catalog.Products.Abstracts.Product")
                        .WithMany("ProductDiscounts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hitasp.HitCommerce.Catalog.Products.Mapping.ProductManufacturer", b =>
                {
                    b.HasOne("Hitasp.HitCommerce.Catalog.Products.Abstracts.Product")
                        .WithMany("ProductManufacturers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hitasp.HitCommerce.Catalog.Products.Mapping.ProductPicture", b =>
                {
                    b.HasOne("Hitasp.HitCommerce.Catalog.Products.Abstracts.Product")
                        .WithMany("ProductPictures")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hitasp.HitCommerce.Catalog.Products.Mapping.ProductProductAttribute", b =>
                {
                    b.HasOne("Hitasp.HitCommerce.Catalog.Attributes.Entities.ProductAttribute")
                        .WithMany()
                        .HasForeignKey("ProductAttributeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Hitasp.HitCommerce.Catalog.Products.Abstracts.Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Hitasp.HitCommerce.Catalog.Products.Abstracts.Product")
                        .WithMany("ProductProductAttributes")
                        .HasForeignKey("ProductId1");
                });

            modelBuilder.Entity("Hitasp.HitCommerce.Catalog.Products.Mapping.ProductProductTag", b =>
                {
                    b.HasOne("Hitasp.HitCommerce.Catalog.Products.Abstracts.Product")
                        .WithMany("ProductTags")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hitasp.HitCommerce.Catalog.Products.Mapping.ProductSpecificationAttribute", b =>
                {
                    b.HasOne("Hitasp.HitCommerce.Catalog.Products.Abstracts.Product")
                        .WithMany("ProductSpecificationAttributes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hitasp.HitCommerce.Catalog.Products.Mapping.ProductWarehouseInventory", b =>
                {
                    b.HasOne("Hitasp.HitCommerce.Catalog.Products.Aggregates.Shippable")
                        .WithMany("ProductWarehouseInventories")
                        .HasForeignKey("ShippableId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hitasp.HitCommerce.Catalog.Products.Mapping.RelatedProduct", b =>
                {
                    b.HasOne("Hitasp.HitCommerce.Catalog.Products.Abstracts.Product")
                        .WithMany("RelatedProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hitasp.HitCommerce.Catalog.Products.Mapping.RequiredProduct", b =>
                {
                    b.HasOne("Hitasp.HitCommerce.Catalog.Products.Abstracts.Product")
                        .WithMany("RequiredProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hitasp.HitCommerce.Catalog.SpecificationAttributes.Entities.SpecificationAttributeOption", b =>
                {
                    b.HasOne("Hitasp.HitCommerce.Catalog.SpecificationAttributes.Entities.SpecificationAttribute")
                        .WithMany()
                        .HasForeignKey("SpecificationAttributeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Hitasp.HitCommerce.Catalog.SpecificationAttributes.Entities.SpecificationAttribute")
                        .WithMany("SpecificationAttributeOptions")
                        .HasForeignKey("SpecificationAttributeId1");
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityRoleClaim", b =>
                {
                    b.HasOne("Volo.Abp.Identity.IdentityRole")
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserClaim", b =>
                {
                    b.HasOne("Volo.Abp.Identity.IdentityUser")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserLogin", b =>
                {
                    b.HasOne("Volo.Abp.Identity.IdentityUser")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserRole", b =>
                {
                    b.HasOne("Volo.Abp.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Volo.Abp.Identity.IdentityUser")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserToken", b =>
                {
                    b.HasOne("Volo.Abp.Identity.IdentityUser")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hitasp.HitCommerce.Catalog.Products.Aggregates.Shippable", b =>
                {
                    b.OwnsOne("Hitasp.HitCommerce.Catalog.Products.Entities.ProductInventory", "Inventory", b1 =>
                        {
                            b1.Property<Guid>("ShippableId");

                            b1.Property<bool>("AllowBackInStockSubscriptions")
                                .HasColumnName("AllowBackInStockSubscriptions");

                            b1.Property<string>("AllowedQuantities")
                                .HasColumnName("AllowedQuantities");

                            b1.Property<bool>("DisplayStockAvailability")
                                .HasColumnName("DisplayStockAvailability");

                            b1.Property<bool>("DisplayStockQuantity")
                                .HasColumnName("DisplayStockQuantity");

                            b1.Property<int>("MinStockQuantity")
                                .HasColumnName("MinStockQuantity");

                            b1.Property<bool>("NotReturnable")
                                .HasColumnName("NotReturnable");

                            b1.Property<int>("OrderMaximumQuantity")
                                .HasColumnName("OrderMaximumQuantity");

                            b1.Property<int>("OrderMinimumQuantity")
                                .HasColumnName("OrderMinimumQuantity");

                            b1.Property<int>("StockQuantity")
                                .HasColumnName("StockQuantity");

                            b1.Property<bool>("UseMultipleWarehouses")
                                .HasColumnName("UseMultipleWarehouses");

                            b1.Property<Guid?>("WarehouseId")
                                .HasColumnName("WarehouseId");

                            b1.HasKey("ShippableId");

                            b1.ToTable("CatalogProduct_Inventory");

                            b1.HasOne("Hitasp.HitCommerce.Catalog.Products.Aggregates.Shippable")
                                .WithOne("Inventory")
                                .HasForeignKey("Hitasp.HitCommerce.Catalog.Products.Entities.ProductInventory", "ShippableId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Hitasp.HitCommerce.Catalog.Products.Entities.ProductShipping", "Shipping", b1 =>
                        {
                            b1.Property<Guid>("ShippableId");

                            b1.Property<decimal>("AdditionalShippingCharge")
                                .HasColumnName("AdditionalShippingCharge");

                            b1.Property<int>("DeliveryDateId")
                                .HasColumnName("DeliveryDateId");

                            b1.Property<decimal>("Height")
                                .HasColumnName("Height");

                            b1.Property<bool>("IsFreeShipping")
                                .HasColumnName("IsFreeShipping");

                            b1.Property<decimal>("Length")
                                .HasColumnName("Length");

                            b1.Property<bool>("ShipSeparately")
                                .HasColumnName("ShipSeparately");

                            b1.Property<decimal>("Weight")
                                .HasColumnName("Weight");

                            b1.Property<decimal>("Width")
                                .HasColumnName("Width");

                            b1.HasKey("ShippableId");

                            b1.ToTable("CatalogProduct_Shipping");

                            b1.HasOne("Hitasp.HitCommerce.Catalog.Products.Aggregates.Shippable")
                                .WithOne("Shipping")
                                .HasForeignKey("Hitasp.HitCommerce.Catalog.Products.Entities.ProductShipping", "ShippableId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
